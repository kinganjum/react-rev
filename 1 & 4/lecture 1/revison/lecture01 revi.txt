<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>revison</title> 
</head>
<body>
    <!-- ************ from line no 9 to 18 i have created a div with id root and now we have to add element to it using js (not with react) ************  -->
    <!-- <div id="root"></div>
    <script>
        const heading = document.createElement("h1"); // now we have created a element "h1".

        heading.innerHTML = "anjum"; // we have inserted value as anjum in h1.
        
        const root = document.getElementById("root"); //it returns value to id, name as root.

        root.appendChild(heading); // here i am adding heading as child to root now root is the parent of heading.
     </script> -->
    <!-- here it ends line no ( 9 to 18 ) run line no 9 to 18 and inspect to understand it more -->
    
    
    <!-- || || || || || || || || || || || || || | | || | | | || | | || | | || | | || | || | | | || |  -->
    
    <!-- ************************************************************ -->
     <!-- <div id="root"></div>
     (line no 27 to 43 take take reference of div line no 26)
        now lets see how to do it with using react 
        i) to use react we have to add cdn links, cdn is nothing but interconnected servers that speeds up webpage loading for data heavy applications.
        ii) crossorigin :- (cors) sets the mode of the request to an HTTP CORS request.
    -->
    <!-- 
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script> // this is core library of react  --> 
    <!-- <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>  // this is web(dom) library of react  -->
    <!-- now add h1 tag into div root (22) -->
    <!-- <script>
        const heading = React.createElement("h1",{},"anjum"); // so basically it will create a element as h1 and it will insert values as anjum.
        const root = ReactDOM.createRoot(document.getElementById("root")); // so it will run the line no 33 to that root id(22).
        //// now put const heading inside const root
        root.render(heading); //passing a react element inside div.
        //// run line no 22 to 36 and inspect to understand more, we have now put const heading inside div id as root.        
    </script>  
     -->


<!-- use of {} => props line no 46 to 57 -->
<!--     <div id="root">
        <h1 id="tittle">Anjum</h1> 
     </div>
     <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script> 
     <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
     <script>
        const heading = React.createElement("h1",{id: "tittle",},"auuu");  //here we use props{} in that we called that idm in that id now we overwrite element data as "auuu".
    //// console.log(heading);
        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(heading); // to pass the react element.
        //// ps:- check spellings of alphabate of each element also check upper case as well as lower case.
    </script>   
    so basically with the help of props we can manipulate a elements data. 
-->

<!-- ||| |||| ||| || | | || | | | | || | | | | | | | | | | | | | -->

<!-- ************ using javascript how to manipulate / repalce element value ************ -->
<!-- <div id="wasp">
</div> 
<script>
const heading = document.createElement("h1"); // it will create h1 tag
heading.innerHTML = "anjummm ustaadd"; // in that tag it will insert value as anjummm ustaadd
const root = document.getElementById("wasp"); // it will make wasp as parent for h1 tag.
root.appendChild(heading); // it will add heading as a child of wasp id.
</script> -->

<!-- ||| |||| ||| || | | || | | | | || | | | | | | | | | | | | | -->


<!-- ************ using React how to manipulate / repalce element value ************ -->
<!-- <div id="react"></div>

<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script> 
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script>
    const heading1 = React.createElement("h1",{},"suiiiii");
    const root = ReactDOM.createRoot(document.getElementById("react"));
    root.render(heading1);
</script> -->
<!-- this how we can done this process by using react. -->
<!-- suppose by mistakely if we write wrong id name then it will show what is written in div - h1tag.(1.24.20) -->

<!-- ||| |||| ||| || | | || | | | | || | | | | | | | | | | | | | -->

<!--************ another use of {} **************-->
<!-- suppose i have to create like this 
    <div id="container">
        <h1 id="title">heading 1</h1>
        <h1 id="title">heading 2</h1>
    </div>   
-->
<!-- <div id="root">not render</div> 
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script> 
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

<script>
    const heading1 = React.createElement("h1",{id: "title",}, "anjum"); // tag and its values
    const heading2 = React.createElement("h1",{id: "title",}, "ustad"); //------||--------
    const root = ReactDOM.createRoot(document.getElementById("root")); //it make root as parent.
    const container = React.createElement("div", {id: "container",}, [heading1, heading2]); // it will create a parent conatiner and inside that it will create its child h1,h1(1.40.12).
    root.render(container); -->
   <!--
    / // now from line no 99 to 109 it will create structure like this :-
   / // <div id="root">
        / <div id="container">
            /<h1 id="title">anjum</h1>
            /<h1 id="title">ustad</h1>
            /</div> 
    / </div>  
 -->

 <!-- ||| || || || | | | || | | || | | | | | | || | | | | || | | | | | | | -->
</script>
</body>
</html>